
💭 equivalent to np.array.
💭 But just for 1D and 2D Arrays!

🌍 🐇 🍎 🍇
   💭 The array itself
  🖍 🆕  array 🍨🐚🍨🐚💯🍆🍆

  💭 The shape of the array
  🖍 🆕  array_shape 🍨🐚🔢🍆

  🆕 🍼 array 🍨🐚🍨🐚💯🍆🍆🍇

     💭 Create empty list of type int
     🆕🍨🐚🔢🍆🐸❗️ ➡️🖍 array_shape

     💭 Get the number of elements in the embedded lists
     🆕🍨🐚🔢🍆🐸❗️ ➡️🖍 🆕 num_elements_embedded_lists

     💭 Get the two array dimensions
     🐔 array❗️ ➡️ array_shape_dim02

     💭 Append the number of elements of all embedded lists
     💭 to num_elements_embedded_lists
     🔂 element 🍡 array❗️🍇
       🐻 num_elements_embedded_lists 🐔 element❗❗
     🍉

     💭 Check if all numbers in num_elements_embedded_lists
     💭 are equal
     🐽 num_elements_embedded_lists 0❗️ ➡️ array_shape_dim01
     🐰 num_elements_embedded_lists 🍇 num_elements 🔢 ➡️ 👌 ↩️  array_shape_dim01 🙌 num_elements 🍉 ❗ ➡️ bool_list
     🐯  bool_list 🍇 bool_element 👌 ➡️ 👌 ↩️  bool_element 🙌 👍 🍉 ❗➡️ valid_array

     ↪️ valid_array 🍇
        🐻 array_shape array_shape_dim01 ❗
        🐻 array_shape array_shape_dim02 ❗
     🍉
     🙅 🍇
        😀 🔤 Array size invalid 🔤❗
     🍉

  🍉

  💭 Getter for 'array'
  ❗🍏 ➡️  🍨🐚🍨🐚💯🍆🍆 🍇
      ↩️ array
   🍉

   💭 Getter for 'array_shape'
   ❗🍐 ➡️  🍨🐚🔢🍆 🍇
      ↩️ array_shape
    🍉

   💭 Print 'array_shape'
   ❗ 🍍 ➡️ 🔡 🍇

       💭 Create empty String array
       🆕🍨🐚🔡🍆🐸❗️ ➡️ 🖍  🆕array_shape_string

       💭 Iterate over array_shape
       🔂 i 🆕🌱🐚🔢🍆🆕 array_shape❗️🍇
         🔡 🍺 i 10 ❗ ➡️ dim
         🐻 array_shape_string dim ❗
       🍉

       💭 Join all elements in String array to String
       🆕 🔡 🍨 array_shape_string 🔤,🔤 ❗ ➡️ my_string

       ↩️ 🍪 🔤[🔤 my_string 🔤]🔤 🍪
    🍉


   💭 List to string
    ❗ 🍌  list 🍨🐚💯🍆 ➡️ 🔡 🍇

        💭 Create empty String array
        🆕🍨🐚🔡🍆🐸❗️ ➡️ 🖍  🆕 list_string

        💭 Iterate over array_shape
        🔂 i 🆕🌱🐚💯🍆🆕 list❗️🍇
          🍺 i ➡️ number
          🐻 list_string 🔡 number 5❗❗
        🍉

        💭 Join all elements in String array to String
        🆕 🔡 🍨 list_string 🔤,🔤 ❗ ➡️ my_string

        💭 Add brackets to string representation
        ↩️ 🍪 🔤[ 🔤 my_string 🔤 ]🔤 🍪
     🍉

   💭 Converts 🍨🐚⚪🍆 to 🍨🐚💯🍆
    ❗ 🥝 list 🍨🐚⚪🍆 ➡️ 🍨🐚💯🍆 🍇
       🐰 list 🍇 element ⚪ ➡️ 💯  ↩️ 🍺 🔲 element 💯  🍉 ❗ ➡️ new_list
       ↩️ new_list
    🍉

   💭 Prints all elements in 'array'
   ❗ 📠  🍇
       💭 Iterate over all elements in 'array'
       💭 and use 🍌 method to print them
       🔂 element 🍡 array❗️🍇
         🍌🐕 element❗ ➡️ string_list
         😀 string_list ❗
       🍉
    🍉

   💭 Does element-wise operations of matrixes/vectors.
   💭 The operation is defined in the callable.
   🐇 ❗ 🍑 arr01🍎  arr02🍎  callable 🍇💯💯➡️💯🍉 ➡️ 🍎 🍇
      🍏 arr01❗ ➡️ array01
      🍏 arr02❗ ➡️ array02

      🍐 arr01❗ ➡️ array_shape01
      🍐 arr02❗ ➡️ array_shape02

      💭 Return error in case the shapes of the two arrays are not equal
      ↪️ ❎ 🐽 array_shape02 0❗ 🙌  🐽 array_shape01 0❗❗👐  ❎ 🐽 array_shape02 1❗ 🙌  🐽 array_shape01 1❗❗ 🍇
        💭 🚨 🆕🚧🆕 🔤 Array shapes do not match!🔤❗️
        😀 🔤 Wrong array shapes!🔤 ❗
      🍉

      💭 Create two ranges equal to the two dimensions
      🆕 ⏩⏩ 0 🐽 array_shape02 1❗ ❗ ➡️  range_dim_01
      🆕 ⏩⏩ 0 🐽 array_shape02 0❗ ❗ ➡️  range_dim_02

      💭 The list to store the result of the Hadamard operation
      🆕🍨🐚🍨🐚💯🍆🍆🐸❗️ ➡️ 🖍  🆕 return_array
      🆕🍨🐚💯🍆🐸❗️ ➡️ 🖍  🆕 inner_array

      🔂 dim01 🍡 range_dim_01❗️🍇
         🔂 dim02 🍡 range_dim_02❗️🍇
            ⁉️ callable 🐽 🐽  array01 dim01 ❗ dim02 ❗  🐽 🐽  array02 dim01 ❗ dim02 ❗ ❗➡️  product
            🐻 inner_array product ❗
         🍉
         🐻 return_array inner_array ❗
         🆕🍨🐚💯🍆🐸❗️ ➡️ 🖍  inner_array
      🍉

      ↩️ 🆕🍎🆕 return_array❗
   🍉

   💭 Element-wise multiplication (Hadamard product)
   🐇 ❗🍈 arr01🍎  arr02🍎 ➡️ 🍎 🍇
      ↩️ 🍑 🐇🍎 arr01 arr02 🍇 number01💯 number02💯 ➡️ 💯 ↩️ number01 ✖ number02 🍉 ❗
   🍉

   💭 Element-wise addition
   🐇 ❗🍋 arr01🍎  arr02🍎 ➡️ 🍎 🍇
       ↩️ 🍑 🐇🍎 arr01 arr02 🍇 number01💯 number02💯 ➡️ 💯 ↩️ number01➕ number02 🍉 ❗
   🍉

🍉
